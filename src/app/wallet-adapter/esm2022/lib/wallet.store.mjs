import { Inject, Injectable, InjectionToken } from '@angular/core';
import { ComponentStore } from '@ngrx/component-store';
import { WalletNotConnectedError, WalletNotReadyError, WalletReadyState, } from '@solana/wallet-adapter-base';
import { EMPTY, catchError, combineLatest, concatMap, defer, filter, finalize, first, firstValueFrom, from, fromEvent, merge, of, pairwise, switchMap, tap, throwError, withLatestFrom, } from 'rxjs';
import { LocalStorageSubject, WalletNotSelectedError, fromAdapterEvent, handleEvent, signAllTransactions, signMessage, signTransaction, } from './internals';
import * as i0 from "@angular/core";
export const WALLET_CONFIG = new InjectionToken('walletConfig');
export const walletConfigProviderFactory = (config) => ({
    provide: WALLET_CONFIG,
    useValue: {
        autoConnect: false,
        localStorageKey: 'walletName',
        adapters: [],
        ...config,
    },
});
const initialState = {
    wallet: null,
    adapter: null,
    connected: false,
    publicKey: null,
    readyState: null,
};
export class WalletStore extends ComponentStore {
    constructor(_config) {
        super({
            ...initialState,
            wallets: [],
            adapters: [],
            connecting: false,
            disconnecting: false,
            unloading: false,
            autoConnect: _config.autoConnect || false,
            readyState: null,
            error: null,
        });
        this._config = _config;
        this._name = new LocalStorageSubject(this._config.localStorageKey);
        this._unloading$ = this.select(({ unloading }) => unloading);
        this._adapters$ = this.select(({ adapters }) => adapters);
        this._adapter$ = this.select(({ adapter }) => adapter);
        this._name$ = this._name.asObservable();
        this._readyState$ = this.select(({ readyState }) => readyState);
        this.wallets$ = this.select(({ wallets }) => wallets);
        this.autoConnect$ = this.select(({ autoConnect }) => autoConnect);
        this.wallet$ = this.select(({ wallet }) => wallet);
        this.publicKey$ = this.select(({ publicKey }) => publicKey);
        this.connecting$ = this.select(({ connecting }) => connecting);
        this.disconnecting$ = this.select(({ disconnecting }) => disconnecting);
        this.connected$ = this.select(({ connected }) => connected);
        this.error$ = this.select(({ error }) => error);
        this.anchorWallet$ = this.select(this.publicKey$, this._adapter$, this.connected$, (publicKey, adapter, connected) => {
            return publicKey &&
                adapter &&
                'signTransaction' in adapter &&
                'signAllTransactions' in adapter
                ? {
                    publicKey,
                    signTransaction: (transaction) => firstValueFrom(signTransaction(adapter, connected, (error) => this._setError(error))(transaction)),
                    signAllTransactions: (transactions) => firstValueFrom(signAllTransactions(adapter, connected, (error) => this._setError(error))(transactions)),
                }
                : undefined;
        }, { debounce: true });
        // Set error
        this._setError = this.updater((state, error) => ({
            ...state,
            error: state.unloading ? state.error : error,
        }));
        // Set ready state
        this._setReadyState = this.updater((state, { readyState, walletName, }) => ({
            ...state,
            wallets: state.wallets.map((wallet) => wallet.adapter.name === walletName ? { ...wallet, readyState } : wallet),
            readyState: state.adapter?.name === walletName ? readyState : state.readyState,
        }));
        // Set adapters
        this.setAdapters = this.updater((state, adapters) => ({
            ...state,
            adapters,
            wallets: adapters.map((adapter) => ({
                adapter,
                readyState: adapter.readyState,
            })),
        }));
        // Update ready state for newly selected adapter
        this.onAdapterChangeDisconnectPreviousAdapter = this.effect(() => this._adapter$.pipe(pairwise(), concatMap(([adapter]) => adapter && adapter.connected
            ? from(defer(() => adapter.disconnect()))
            : of(null))));
        // When the selected wallet changes, initialize the state
        this.onWalletChanged = this.effect(() => combineLatest([this._name$, this.wallets$]).pipe(tap(([name, wallets]) => {
            const wallet = wallets.find(({ adapter }) => adapter.name === name);
            if (wallet) {
                this.patchState({
                    wallet,
                    adapter: wallet.adapter,
                    connected: wallet.adapter.connected,
                    publicKey: wallet.adapter.publicKey,
                    readyState: wallet.adapter.readyState,
                });
            }
            else {
                this.patchState(initialState);
            }
        })));
        // If autoConnect is enabled, try to connect when the adapter changes and is ready
        this.onAutoConnect = this.effect(() => {
            return combineLatest([
                this._adapter$,
                this._readyState$,
                this.autoConnect$,
                this.connecting$,
                this.connected$,
            ]).pipe(concatMap(([adapter, readyState, autoConnect, connecting, connected]) => {
                if (!autoConnect ||
                    adapter == null ||
                    (readyState !== WalletReadyState.Installed &&
                        readyState !== WalletReadyState.Loadable) ||
                    connecting ||
                    connected) {
                    return EMPTY;
                }
                this.patchState({ connecting: true });
                return from(defer(() => adapter.connect())).pipe(catchError(() => {
                    // Clear the selected wallet
                    this.selectWallet(null);
                    // Don't throw error, but onError will still be called
                    return EMPTY;
                }), finalize(() => this.patchState({ connecting: false })));
            }));
        });
        // If the window is closing or reloading, ignore disconnect and error events from the adapter
        this.onWindowUnload = this.effect(() => {
            if (typeof window === 'undefined') {
                return of(null);
            }
            return fromEvent(window, 'beforeunload').pipe(tap(() => this.patchState({ unloading: true })));
        });
        // Handle the adapter's connect event
        this.onConnect = this.effect(() => {
            return this._adapter$.pipe(handleEvent((adapter) => fromAdapterEvent(adapter, 'connect').pipe(tap(() => this.patchState({
                connected: adapter.connected,
                publicKey: adapter.publicKey,
            })))));
        });
        // Handle the adapter's disconnect event
        this.onDisconnect = this.effect(() => {
            return this._adapter$.pipe(handleEvent((adapter) => fromAdapterEvent(adapter, 'disconnect').pipe(concatMap(() => of(null).pipe(withLatestFrom(this._unloading$))), filter(([, unloading]) => !unloading), tap(() => this.selectWallet(null)))));
        });
        // Handle the adapter's error event
        this.onError = this.effect(() => {
            return this._adapter$.pipe(handleEvent((adapter) => fromAdapterEvent(adapter, 'error').pipe(tap((error) => this._setError(error)))));
        });
        // Handle all adapters ready state change events
        this.onReadyStateChanges = this.effect(() => {
            return this._adapters$.pipe(switchMap((adapters) => merge(...adapters.map((adapter) => fromAdapterEvent(adapter, 'readyStateChange').pipe(tap((readyState) => this._setReadyState({ readyState, walletName: adapter.name })))))));
        });
        this.setAdapters(this._config.adapters);
    }
    // Select a new wallet
    selectWallet(walletName) {
        this._name.next(walletName);
    }
    // Connect the adapter to the wallet
    connect() {
        return combineLatest([
            this.connecting$,
            this.disconnecting$,
            this.connected$,
            this._adapter$,
            this._readyState$,
        ]).pipe(first(), filter(([connecting, disconnecting, connected]) => !connected && !connecting && !disconnecting), concatMap(([, , , adapter, readyState]) => {
            if (!adapter) {
                const error = new WalletNotSelectedError();
                this._setError(error);
                return throwError(() => error);
            }
            if (!(readyState === WalletReadyState.Installed ||
                readyState === WalletReadyState.Loadable)) {
                this.selectWallet(null);
                if (typeof window !== 'undefined') {
                    window.open(adapter.url, '_blank');
                }
                const error = new WalletNotReadyError();
                this._setError(error);
                return throwError(() => error);
            }
            this.patchState({ connecting: true });
            return from(defer(() => adapter.connect())).pipe(catchError((error) => {
                this.selectWallet(null);
                return throwError(() => error);
            }), finalize(() => this.patchState({ connecting: false })));
        }));
    }
    // Disconnect the adapter from the wallet
    disconnect() {
        return combineLatest([this.disconnecting$, this._adapter$]).pipe(first(), filter(([disconnecting]) => !disconnecting), concatMap(([, adapter]) => {
            if (!adapter) {
                this.selectWallet(null);
                return EMPTY;
            }
            this.patchState({ disconnecting: true });
            return from(defer(() => adapter.disconnect())).pipe(catchError((error) => {
                this.selectWallet(null);
                // Rethrow the error, and handleError will also be called
                return throwError(() => error);
            }), finalize(() => {
                this.patchState({ disconnecting: false });
            }));
        }));
    }
    // Send a transaction using the provided connection
    sendTransaction(transaction, connection, options) {
        return combineLatest([this._adapter$, this.connected$]).pipe(first(), concatMap(([adapter, connected]) => {
            if (!adapter) {
                const error = new WalletNotSelectedError();
                this._setError(error);
                return throwError(() => error);
            }
            if (!connected) {
                const error = new WalletNotConnectedError();
                this._setError(error);
                return throwError(() => error);
            }
            return from(defer(() => adapter.sendTransaction(transaction, connection, options)));
        }));
    }
    // Sign a transaction if the wallet supports it
    signTransaction(transaction) {
        const { adapter, connected } = this.get();
        return adapter && 'signTransaction' in adapter
            ? signTransaction(adapter, connected, (error) => this._setError(error))(transaction)
            : undefined;
    }
    // Sign multiple transactions if the wallet supports it
    signAllTransactions(transactions) {
        const { adapter, connected } = this.get();
        return adapter && 'signAllTransactions' in adapter
            ? signAllTransactions(adapter, connected, (error) => this._setError(error))(transactions)
            : undefined;
    }
    // Sign an arbitrary message if the wallet supports it
    signMessage(message) {
        const { adapter, connected } = this.get();
        return adapter && 'signMessage' in adapter
            ? signMessage(adapter, connected, (error) => this._setError(error))(message)
            : undefined;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: WalletStore, deps: [{ token: WALLET_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: WalletStore }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: WalletStore, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [WALLET_CONFIG]
                }] }] });
//# sourceMappingURL=data:application/json;base64,