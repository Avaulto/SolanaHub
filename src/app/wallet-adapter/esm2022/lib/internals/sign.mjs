import { WalletNotConnectedError, } from '@solana/wallet-adapter-base';
import { defer, from, throwError } from 'rxjs';
export const signMessage = (adapter, connected, errorHandler) => {
    return (message) => {
        if (!connected) {
            return throwError(() => errorHandler(new WalletNotConnectedError()));
        }
        return from(defer(() => adapter.signMessage(message)));
    };
};
export const signTransaction = (adapter, connected, errorHandler) => {
    return (transaction) => {
        if (!connected) {
            return throwError(() => errorHandler(new WalletNotConnectedError()));
        }
        return from(defer(() => adapter.signTransaction(transaction)));
    };
};
export const signAllTransactions = (adapter, connected, errorHandler) => {
    return (transactions) => {
        if (!connected) {
            return throwError(() => errorHandler(new WalletNotConnectedError()));
        }
        return from(defer(() => adapter.signAllTransactions(transactions)));
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2RhdGEtYWNjZXNzL3NyYy9saWIvaW50ZXJuYWxzL3NpZ24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQU1MLHVCQUF1QixHQUN4QixNQUFNLDZCQUE2QixDQUFDO0FBRXJDLE9BQU8sRUFBYyxLQUFLLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQW9CM0QsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQ3pCLE9BQW1DLEVBQ25DLFNBQWtCLEVBQ2xCLFlBQTZDLEVBQ00sRUFBRTtJQUNyRCxPQUFPLENBQUMsT0FBbUIsRUFBRSxFQUFFO1FBQzdCLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSx1QkFBdUIsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN0RTtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FDN0IsT0FBNEIsRUFDNUIsU0FBa0IsRUFDbEIsWUFBNkMsRUFDUixFQUFFO0lBQ3ZDLE9BQU8sQ0FBQyxXQUFjLEVBQUUsRUFBRTtRQUN4QixJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdEU7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FHakMsT0FBNEIsRUFDNUIsU0FBa0IsRUFDbEIsWUFBNkMsRUFDSCxFQUFFO0lBQzVDLE9BQU8sQ0FBQyxZQUFpQixFQUFFLEVBQUU7UUFDM0IsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLE9BQU8sVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLHVCQUF1QixFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTWVzc2FnZVNpZ25lcldhbGxldEFkYXB0ZXIsXG4gIFNpZ25lcldhbGxldEFkYXB0ZXIsXG4gIFRyYW5zYWN0aW9uT3JWZXJzaW9uZWRUcmFuc2FjdGlvbixcbiAgV2FsbGV0QWRhcHRlclByb3BzLFxuICBXYWxsZXRFcnJvcixcbiAgV2FsbGV0Tm90Q29ubmVjdGVkRXJyb3IsXG59IGZyb20gJ0Bzb2xhbmEvd2FsbGV0LWFkYXB0ZXItYmFzZSc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiwgVmVyc2lvbmVkVHJhbnNhY3Rpb24gfSBmcm9tICdAc29sYW5hL3dlYjMuanMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZGVmZXIsIGZyb20sIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBTaWduZXJXYWxsZXRBZGFwdGVyUHJvcHM8TmFtZSBleHRlbmRzIHN0cmluZyA9IHN0cmluZz5cbiAgZXh0ZW5kcyBXYWxsZXRBZGFwdGVyUHJvcHM8TmFtZT4ge1xuICBzaWduVHJhbnNhY3Rpb248XG4gICAgVCBleHRlbmRzIFRyYW5zYWN0aW9uT3JWZXJzaW9uZWRUcmFuc2FjdGlvbjxcbiAgICAgIHRoaXNbJ3N1cHBvcnRlZFRyYW5zYWN0aW9uVmVyc2lvbnMnXVxuICAgID5cbiAgPihcbiAgICB0cmFuc2FjdGlvbjogVFxuICApOiBPYnNlcnZhYmxlPFQ+O1xuICBzaWduQWxsVHJhbnNhY3Rpb25zPFxuICAgIFQgZXh0ZW5kcyBUcmFuc2FjdGlvbk9yVmVyc2lvbmVkVHJhbnNhY3Rpb248XG4gICAgICB0aGlzWydzdXBwb3J0ZWRUcmFuc2FjdGlvblZlcnNpb25zJ11cbiAgICA+XG4gID4oXG4gICAgdHJhbnNhY3Rpb25zOiBUW11cbiAgKTogT2JzZXJ2YWJsZTxUW10+O1xufVxuXG5leHBvcnQgY29uc3Qgc2lnbk1lc3NhZ2UgPSAoXG4gIGFkYXB0ZXI6IE1lc3NhZ2VTaWduZXJXYWxsZXRBZGFwdGVyLFxuICBjb25uZWN0ZWQ6IGJvb2xlYW4sXG4gIGVycm9ySGFuZGxlcjogKGVycm9yOiBXYWxsZXRFcnJvcikgPT4gdW5rbm93blxuKTogKChtZXNzYWdlOiBVaW50OEFycmF5KSA9PiBPYnNlcnZhYmxlPFVpbnQ4QXJyYXk+KSA9PiB7XG4gIHJldHVybiAobWVzc2FnZTogVWludDhBcnJheSkgPT4ge1xuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvcigoKSA9PiBlcnJvckhhbmRsZXIobmV3IFdhbGxldE5vdENvbm5lY3RlZEVycm9yKCkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJvbShkZWZlcigoKSA9PiBhZGFwdGVyLnNpZ25NZXNzYWdlKG1lc3NhZ2UpKSk7XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2lnblRyYW5zYWN0aW9uID0gPFQgZXh0ZW5kcyBUcmFuc2FjdGlvbiB8IFZlcnNpb25lZFRyYW5zYWN0aW9uPihcbiAgYWRhcHRlcjogU2lnbmVyV2FsbGV0QWRhcHRlcixcbiAgY29ubmVjdGVkOiBib29sZWFuLFxuICBlcnJvckhhbmRsZXI6IChlcnJvcjogV2FsbGV0RXJyb3IpID0+IHVua25vd25cbik6ICgodHJhbnNhY3Rpb246IFQpID0+IE9ic2VydmFibGU8VD4pID0+IHtcbiAgcmV0dXJuICh0cmFuc2FjdGlvbjogVCkgPT4ge1xuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvcigoKSA9PiBlcnJvckhhbmRsZXIobmV3IFdhbGxldE5vdENvbm5lY3RlZEVycm9yKCkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJvbShkZWZlcigoKSA9PiBhZGFwdGVyLnNpZ25UcmFuc2FjdGlvbih0cmFuc2FjdGlvbikpKTtcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaWduQWxsVHJhbnNhY3Rpb25zID0gPFxuICBUIGV4dGVuZHMgVHJhbnNhY3Rpb24gfCBWZXJzaW9uZWRUcmFuc2FjdGlvblxuPihcbiAgYWRhcHRlcjogU2lnbmVyV2FsbGV0QWRhcHRlcixcbiAgY29ubmVjdGVkOiBib29sZWFuLFxuICBlcnJvckhhbmRsZXI6IChlcnJvcjogV2FsbGV0RXJyb3IpID0+IHVua25vd25cbik6ICgodHJhbnNhY3Rpb25zOiBUW10pID0+IE9ic2VydmFibGU8VFtdPikgPT4ge1xuICByZXR1cm4gKHRyYW5zYWN0aW9uczogVFtdKSA9PiB7XG4gICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aHJvd0Vycm9yKCgpID0+IGVycm9ySGFuZGxlcihuZXcgV2FsbGV0Tm90Q29ubmVjdGVkRXJyb3IoKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmcm9tKGRlZmVyKCgpID0+IGFkYXB0ZXIuc2lnbkFsbFRyYW5zYWN0aW9ucyh0cmFuc2FjdGlvbnMpKSk7XG4gIH07XG59O1xuIl19